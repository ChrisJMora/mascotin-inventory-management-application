name: Docker Compose Deployment Pipeline

################################################################################
# DESCRIPCIÓN COMPLETA DEL WORKFLOW
#
# Este workflow automatiza el proceso de:
# 1. Construcción de imágenes Docker según docker-compose.yml
# 2. Despliegue de múltiples servicios interconectados
# 3. Validación del estado y funcionalidad de los servicios
# 4. Limpieza de recursos post-ejecución
#
# Flujo de ejecución:
# - Se activa en eventos de pull request hacia main
# - Configura el entorno Docker con Buildx (incluye Docker Compose)
# - Levanta los servicios definidos en docker-compose.yml
# - Realiza validaciones secuenciales:
#   * Disponibilidad de MySQL
#   * Creación de la base de datos
#   * Respuesta HTTP de la aplicación
# - Proporciona herramientas de diagnóstico en caso de fallos
# - Limpia recursos independientemente del resultado
################################################################################

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: pr-docker-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  docker-compose-deployment:
    name: Docker Compose Deployment
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------------------------
      # PASO 1: OBTENER CÓDIGO FUENTE
      # ------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Optimización: Solo clona el commit necesario

      # ------------------------------------------------------------------------
      # PASO 2: CONFIGURAR ENTORNO DOCKER
      # ------------------------------------------------------------------------
      - name: Setup Docker environment
        uses: docker/setup-buildx-action@v3
        with:
          install: true  # Instala Docker CLI y componentes necesarios
          version: latest  # Usa la versión más estable disponible
          driver-opts: |
            image=moby/buildkit:master  # Usa la imagen más reciente de BuildKit

      # ------------------------------------------------------------------------
      # PASO 3: CONFIGURAR VARIABLES DE ENTORNO
      # ------------------------------------------------------------------------
      - name: Configure environment variables
        run: |
          # Crear archivo .env con formato seguro
          {
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}"
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}"
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}"
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
          } > .env
          
          # Mostrar configuración (excluyendo valores sensibles)
          echo "=== Configuración aplicada ==="
          grep -v 'PASSWORD' .env

      # ------------------------------------------------------------------------
      # PASO 4: EJECUTAR DOCKER COMPOSE
      # ------------------------------------------------------------------------
      - name: Start services with Docker Compose
        run: |
          # Construir imágenes y levantar servicios
          docker compose up -d --build --force-recreate
          
          # Mostrar estado de los servicios
          echo "=== Estado de los servicios ==="
          docker compose ps -a
          
          # Mostrar logs iniciales para diagnóstico temprano
          echo "=== Logs iniciales ==="
          docker compose logs --tail=50

      # ------------------------------------------------------------------------
      # PASO 5: VALIDACIÓN DE SERVICIOS
      # ------------------------------------------------------------------------
      - name: Service validation
        timeout-minutes: 10  # Límite de tiempo para validaciones
        run: |
          # ----------------------------------------------------------
          # Validación de MySQL
          # ----------------------------------------------------------
          echo "⏳ Validando estado de MySQL..."
          for i in {1..30}; do
            if docker compose exec db mysqladmin ping \
              -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" \
              --silent; then
              echo "✅ MySQL validation passed"
              break
            fi
            echo "Attempt $i/30 - MySQL not ready..."
            sleep 5
            if [ $i -eq 30 ]; then
              echo "❌ MySQL validation failed"
              docker compose logs db
              exit 1
            fi
          done

          # ----------------------------------------------------------
          # Validación de Base de Datos
          # ----------------------------------------------------------
          echo "⏳ Validando creación de base de datos..."
          if ! docker compose exec db mysql \
            -u "${{ secrets.MYSQL_USER }}" \
            -p"${{ secrets.MYSQL_PASSWORD }}" \
            -e "USE ${{ secrets.MYSQL_DATABASE }};"; then
            echo "❌ Database validation failed"
            docker compose exec db mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "SHOW DATABASES;"
            exit 1
          fi
          echo "✅ Database validation passed"

          # ----------------------------------------------------------
          # Validación de Aplicación
          # ----------------------------------------------------------
          echo "⏳ Validando aplicación..."
          for i in {1..30}; do
            HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" \
              http://localhost:8080/health-check || true)
          
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "✅ Application validation passed (HTTP 200)"
              break
            fi
          
            echo "Attempt $i/30 - Application returned HTTP $HTTP_STATUS..."
            sleep 5
            if [ $i -eq 30 ]; then
              echo "❌ Application validation failed"
              docker compose logs app
              exit 1
            fi
          done

      # ------------------------------------------------------------------------
      # PASO 6: DIAGNÓSTICO (SOLO EN FALLOS)
      # ------------------------------------------------------------------------
      - name: Diagnostic information
        if: failure()
        run: |
          echo "=== FULL DIAGNOSTICS ==="
          echo "1. Service status:"
          docker compose ps -a
          echo "\n2. Application logs:"
          docker compose logs app
          echo "\n3. Database logs:"
          docker compose logs db
          echo "\n4. Network connections:"
          netstat -tuln
          echo "\n5. Docker network inspection:"
          docker network inspect $(docker compose ps -q | head -1 | xargs docker inspect --format='{{range .NetworkSettings.Networks}}{{.NetworkID}}{{end}}')

      # ------------------------------------------------------------------------
      # PASO 7: LIMPIEZA
      # ------------------------------------------------------------------------
      - name: Cleanup resources
        if: always()  # Siempre ejecutar, incluso en fallos
        run: |
          echo "=== Cleaning up resources ==="
          docker compose down -v --remove-orphans --rmi local
          docker system prune -f
          echo "✅ Cleanup completed"