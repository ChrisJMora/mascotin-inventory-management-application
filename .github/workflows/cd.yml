name: Docker Compose Deployment with Advanced Debugging

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: pr-docker-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  docker-compose-deployment:
    name: Docker Compose Deployment
    runs-on: ubuntu-latest

    steps:
      ## ---------------------------
      ## SECCIÓN 1: PREPARACIÓN
      ## ---------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker environment
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Configure environment
        run: |
          {
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}"
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}"
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}"
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
          } > .env
          echo "=== Environment Variables (sanitized) ==="
          grep -v 'PASSWORD' .env

      ## ---------------------------
      ## SECCIÓN 2: DESPLIEGUE
      ## ---------------------------
      - name: Start services
        run: |
          echo "=== Starting services with Docker Compose ==="
          docker-compose up -d --build
          
          echo "\n=== Current container status ==="
          docker-compose ps -a
          
          echo "\n=== Initial logs preview ==="
          docker-compose logs --tail=50

      ## ---------------------------
      ## SECCIÓN 3: VALIDACIONES
      ## ---------------------------
      - name: Validate MySQL service
        timeout-minutes: 5
        run: |
          echo "=== Validating MySQL ==="
          for i in {1..30}; do
            if docker-compose exec db mysqladmin ping -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" --silent; then
              echo "✅ MySQL is responsive"
          
              exit 0
            fi
            echo "⏳ Waiting for MySQL... Attempt $i/30"
            sleep 2
          done
          
          echo "❌ MySQL validation failed"
          echo "\n=== MySQL Container Logs ==="
          docker-compose logs db
          exit 1

      - name: Validate Application Health
        timeout-minutes: 10
        run: |
          echo "=== Validating Application ==="
          for i in {1..30}; do
            HTTP_STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://localhost:8080/health || true)
          
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "✅ Application is healthy (HTTP 200)"
              echo "\n=== Sample Response ==="
              curl -s http://localhost:8080/health | jq . || curl -s http://localhost:8080/health
              exit 0
            fi
          
            echo "⏳ Waiting for app... Attempt $i/30 (HTTP $HTTP_STATUS)"
          
            # Debug every 5 attempts
            if (( $i % 5 == 0 )); then
              echo "\n=== Debug Info (Attempt $i) ==="
              echo "1. Container status:"
              docker-compose ps -a
              echo "\n2. App logs (last 20 lines):"
              docker-compose logs app --tail=20
              echo "\n3. Network connections:"
              netstat -tulnp | grep 8080 || true
            fi
          
            sleep 2
          done
          
          echo "❌ Application validation failed"
          echo "\n=== Full Debug Info ==="
          echo "1. All containers:"
          docker-compose ps -a
          echo "\n2. Application logs:"
          docker-compose logs app
          echo "\n3. Database logs:"
          docker-compose logs db
          echo "\n4. Network inspection:"
          docker inspect $(docker-compose ps -q app)
          exit 1

      ## ---------------------------
      ## SECCIÓN 4: DIAGNÓSTICO
      ## ---------------------------
      - name: Debug on Failure
        if: failure()
        run: |
          echo "=== FULL SYSTEM DIAGNOSTICS ==="
          echo "\n1. All Docker containers:"
          docker ps -a
          
          echo "\n2. Docker Compose status:"
          docker-compose ps -a
          
          echo "\n3. Application logs:"
          docker-compose logs app --tail=200
          
          echo "\n4. Database logs:"
          docker-compose logs db --tail=200
          
          echo "\n5. Network connections:"
          netstat -tulnp
          
          echo "\n6. Disk usage:"
          df -h
          
          echo "\n7. Memory usage:"
          free -h

      ## ---------------------------
      ## SECCIÓN 5: LIMPIEZA
      ## ---------------------------
      - name: Cleanup resources
        if: always()
        run: |
          echo "=== Cleaning up ==="
          echo "1. Stopping containers..."
          docker-compose down -v --remove-orphans
          
          echo "\n2. Pruning system..."
          docker system prune -f
          
          echo "\n3. Final disk usage:"
          df -h