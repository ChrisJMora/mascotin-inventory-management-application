name: Docker Compose Deployment Pipeline

################################################################################
# DESCRIPCIÓN COMPLETA DEL WORKFLOW
#
# Este workflow automatiza el proceso de:
# 1. Construcción de imágenes Docker según docker-compose.yml
# 2. Despliegue de múltiples servicios interconectados
# 3. Validación del estado y funcionalidad de los servicios
# 4. Limpieza de recursos post-ejecución
#
# Flujo de ejecución:
# - Se activa en eventos de pull request hacia main
# - Configura el entorno Docker con Buildx (incluye Docker Compose)
# - Levanta los servicios definidos en docker-compose.yml
# - Realiza validaciones secuenciales:
#   * Disponibilidad de MySQL
#   * Creación de la base de datos
#   * Respuesta HTTP de la aplicación
# - Proporciona herramientas de diagnóstico en caso de fallos
# - Limpia recursos independientemente del resultado
################################################################################

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: pr-docker-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  docker-compose-deployment:
    name: Docker Compose Deployment
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------------------------
      # PASO 1: OBTENER CÓDIGO FUENTE
      # ------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ------------------------------------------------------------------------
      # PASO 2: CONFIGURAR DOCKER Y COMPOSE
      # ------------------------------------------------------------------------
      - name: Setup Docker
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.11.0  # Versión estable conocida
          driver: docker-container

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # ------------------------------------------------------------------------
      # PASO 3: CONFIGURAR VARIABLES DE ENTORNO
      # ------------------------------------------------------------------------
      - name: Configure environment
        run: |
          {
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}"
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}"
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}"
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
          } > .env
          grep -v 'PASSWORD' .env

      # ------------------------------------------------------------------------
      # PASO 4: EJECUTAR Y VALIDAR SERVICIOS
      # ------------------------------------------------------------------------
      - name: Run and validate services
        run: |
          # Levantar servicios
          docker-compose up -d --build
          
          # Esperar MySQL
          echo "Waiting for MySQL..."
          for i in {1..30}; do
            if docker-compose exec db mysqladmin ping -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" --silent; then
              echo "MySQL ready"
              break
            fi
            sleep 2
            [ $i -eq 30 ] && echo "MySQL timeout" && exit 1
          done

          # Validar aplicación
          echo "Validating application..."
          for i in {1..30}; do
            if curl --fail --silent http://localhost:8080/; then
              echo "App ready"
              exit 0
            fi
            sleep 2
            [ $i -eq 30 ] && echo "App timeout" && exit 1
          done

      # ------------------------------------------------------------------------
      # PASO 5: LIMPIEZA
      # ------------------------------------------------------------------------
      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f